import Igis
import Scenes

class TextDisplay : RenderableEntity {

    public var showCloneText = false
    public var showEnemyCriticalText = false
    public var showAllyCriticalText = false
    
    public var currentClones = 0
    public var stunnedRoundLeft = 0

    private var cloneText = Text(location: Point(), text: "")
    private var stunText =  Text(location: Point(), text: "")
    //public var enemyCriticalText : Text
    //public var allyCriticalText : Text

    private let extraSpace = 30
    
    init() {
        super.init(name: "TextDisplay")
    }

    override func setup(canvasSize: Size, canvas: Canvas) {
        let playerStatsSize = foregroundLayer().playerStats.size
        
        if let canvasSize = canvas.canvasSize {
            cloneText = Text(location: Point(x: canvasSize.width - playerStatsSize.width - extraSpace, y: playerStatsSize.height / 3), text: "Null")
            cloneText.font = "30pt Arial bold"
            cloneText.alignment = .right
            
            stunText = Text(location: Point(x: canvasSize.width - playerStatsSize.width - extraSpace, y: (playerStatsSize.height * 2) / 3), text: "Null")
            stunText.font = "30pt Arial bold"
            stunText.alignment = .right
            
        }
    }
    
    override func render(canvas: Canvas) {
        if (showCloneText) {
            cloneText.text = "\(foregroundLayer().currentCloneAttackMoves) clones spawned!"
            
            canvas.render(cloneText)
        }
        

        if (foregroundLayer().enemyStunMoves > 0) {
            stunText.text = "Stunned for \(foregroundLayer().enemyStunMoves) more turn"
            canvas.render(stunText)
        }
        
    }

    private func foregroundLayer() -> ForegroundLayer {
        guard let mainScene = scene as? MainScene else {
            fatalError("mainScene of type MainScene is required")
        }
        return mainScene.foregroundLayer
    }
}
